{
  "openrpc": "1.2.4",
  "info": {
    "title": "Quantum JSON-RPC API Reference",
    "version": "2.0.0"
  },
  "methods": [
    {
      "name": "wallet_chainIds",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Quantum"
        }
      ],
      "summary": "Return the selected account chains IDs.",
      "result": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "examples": [
        {
          "name": "Get the wallet networks chain IDs",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "wallet_chainIds"
          }
        }
      ]
    },
    {
      "name": "wallet_watchAsset",
      "summary": "Tracks a token in Quantum.",
      "description": "Requests that the user track the specified token in Quantum. Returns a boolean indicating if the token was successfully added. Once added, the token is indistinguishable from those added using legacy methods, such as a centralized registry. Originally introduced by [EIP-747](https://eips.ethereum.org/EIPS/eip-747), however the current specification for EIP-747 has diverged from the implementation in Quantum. The implementation in Quantum, described below, matches the version of EIP-747 found here: https://github.com/ethereum/EIPs/blob/36102e0c82630e2654fd019f54914330d1c37f74/EIPS/eip-747.md. In Quantum, you have the option to specify the network to which the token will be added. If not specified, the token will be added to the default chain ID selected for the current connection.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        }
      ],
      "options": {
        "$ref": "#/components/schemas/MethodOptions"
      },
      "params": {
        "type": {
          "type": "string",
          "description": "Currently only supports ERC20 tokens.",
          "enum": ["ERC20"]
        },
        "options": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The address of the token contract."
            },
            "symbol": {
              "type": "string",
              "minLength": 2,
              "maxLength": 11,
              "description": "A ticker symbol or shorthand, up to 11 characters."
            },
            "decimals": {
              "type": "number",
              "description": "The number of token decimals."
            },
            "image": {
              "type": "string",
              "description": "A string URL of the token logo."
            }
          }
        }
      },
      "result": {
        "type": "boolean",
        "description": "`true` if the token was added, `false` otherwise."
      },
      "examples": [
        {
          "name": "Add an ERC20 token on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "wallet_watchAsset",
            "params": {
              "type": "ERC20",
              "options": {
                "address": "0x6982508145454ce325ddbe47a25d4ec3d2311933",
                "symbol": "PEPE",
                "decimals": 18
              }
            }
          }
        },
        {
          "name": "Add the DOGE token on the Binance network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "wallet_watchAsset",
            "options": {
              "chainId": "0x38"
            },
            "params": {
              "type": "ERC20",
              "options": {
                "address": "0xbA2aE424d960c26247Dd6c32edC70B295c744C43",
                "symbol": "DOGE",
                "decimals": 8
              }
            }
          }
        }
      ]
    },
    {
      "name": "wallet_addEthereumChain",
      "summary": "Adds an Ethereum chain to the wallet.",
      "description": "Creates a confirmation asking the user to add the specified chain to the wallet application. The caller must specify a chain ID and some chain metadata. The wallet application may refuse or accept the request. `null` is returned if the chain is added, and an error otherwise. Introduced by [EIP 3085](https://eips.ethereum.org/EIPS/eip-3085).",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/AddEthereumChainParameter"
        }
      ],
      "errors": [
        {
          "code": -32602,
          "message": "Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${blockExplorerUrls}"
        },
        {
          "code": -32602,
          "message": "Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${chainId}"
        },
        {
          "code": -32602,
          "message": "Invalid chain ID \"${_chainId}\": numerical value greater than max safe value. Received:\n${chainId}"
        },
        {
          "code": -32602,
          "message": "May not specify default Quantum chain."
        },
        {
          "code": -32602,
          "message": "Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${ticker}"
        },
        {
          "code": -32602,
          "message": "nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${ticker}"
        }
      ],
      "result": {
        "type": "null"
      },
      "examples": [
        {
          "name": "Add new network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "wallet_addEthereumChain",
            "params": [
              {
                "chainId": "0x64",
                "chainName": "Gnosis",
                "nativeCurrency": {
                  "name": "xDAI",
                  "symbol": "xDAI",
                  "decimals": 18
                },
                "blockExplorerUrls": ["https://blockscout.com/xdai/mainnet"],
                "rpcUrls": ["https://rpc.gnosischain.com"]
              }
            ]
          }
        }
      ]
    },
    {
      "name": "wallet_switchEthereumChain",
      "summary": "Switches the wallet's default chain ID for the current connection.",
      "description": "Requests that the wallet switching the default chain ID for this connection. In Quantum this will not prompt the user and you can see the network switched in the wallet Web3 tab. Introduced by [EIP 3326](https://ethereum-magicians.org/t/eip-3326-wallet-switchethereumchain).",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        }
      ],
      "params": [
        {
          "type": "object",
          "properties": {
            "chainId": {
              "type": "string",
              "required": true,
              "description": "MUST specify the integer ID of the chain as a hexadecimal string, per the eth_chainId Ethereum RPC method."
            }
          }
        }
      ],
      "result": {
        "type": "null"
      },
      "errors": [
        {
          "code": 4902,
          "message": "Unrecognized chain ID. Try adding the chain using `wallet_addEthereumChain` first."
        }
      ],
      "examples": [
        {
          "name": "Switch the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "wallet_switchEthereumChain",
            "params": [
              {
                "chainId": "0x89"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "wallet_requestPermissions",
      "summary": "Requests additional permissions.",
      "description": "Requests additional permissions from the user. Currently no additional permissions implemented and this will be equal to the 'eth_accounts' API. Introduced by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        }
      ],
      "params": [
        {
          "type": "object",
          "properties": {
            "eth_accounts": {
              "type": "object"
            }
          }
        }
      ],
      "result": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/address"
        }
      },
      "examples": [
        {
          "name": "Request the wallet accounts permission",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "wallet_requestPermissions",
            "params": [
              {
                "eth_accounts": {}
              }
            ]
          }
        }
      ]
    },
    {
      "name": "personal_sign",
      "summary": "Presents a plain text signature challenge to the user.",
      "description": "Presents a plain text signature challenge to the user and returns the signed response. Equivalent to `eth_sign` on some other wallets, and prepends a safe prefix to the signed message to prevent the challenge tricking users into signing a financial transaction. This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` first.",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        },
        {
          "$ref": "#/components/tags/Restricted"
        }
      ],
      "params": [
        {
          "type": "string",
          "required": true,
          "pattern": "^0x[a-fA-F\\d]+$",
          "description": "A hex-encoded UTF-8 string to present to the user. See how to encode a string like this in the [`browser-string-hexer`](https://github.com/danfinlay/browser-string-hexer) module."
        },
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "The address of the requested signing account."
        }
      ],
      "result": {
        "$ref": "#/components/schemas/bytes",
        "description": "A hex-encoded 129-byte array starting with `0x`."
      },
      "examples": [
        {
          "name": "Sign a message using the `personal_sign` method",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "personal_sign",
            "params": ["0x68656c6c6f", "[[account]]"]
          }
        }
      ]
    },
    {
      "name": "eth_accounts",
      "description": "Returns a list of addresses for the accounts owned by the user.",
      "summary": "Gets a list of addresses for the user's accounts.",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        },
        {
          "$ref": "#/components/tags/Restricted"
        }
      ],
      "result": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/address"
        }
      },
      "examples": [
        {
          "name": "Get the wallet selected account",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_accounts"
          }
        }
      ]
    },
    {
      "name": "eth_chainId",
      "summary": "Returns the connection default network chain ID.",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Chain ID"
      },
      "examples": [
        {
          "name": "Get the connection default network chain ID",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_chainId"
          }
        }
      ]
    },
    {
      "name": "eth_getEncryptionPublicKey",
      "summary": "Gets a public key used for encryption.",
      "description": "Requests that the user share their public encryption key. Returns a public encryption key, or rejects if the user denies the request. The public key is computed from entropy associated with the specified user account, using the NaCl implementation of the `X25519_XSalsa20_Poly1305` algorithm.",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        },
        {
          "$ref": "#/components/tags/Restricted"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "The address of the Ethereum account that can decrypt the message."
        }
      ],
      "result": {
        "type": "string",
        "description": "The public encryption key."
      },
      "examples": [
        {
          "name": "Get the account public encryption key",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getEncryptionPublicKey",
            "params": ["[[account]]"]
          }
        }
      ]
    },
    {
      "name": "eth_decrypt",
      "summary": "Decrypts an encrypted message.",
      "description": "Requests that Quantum decrypt the specified encrypted message. The message must have been encrypted using the public encryption key of the specified Ethereum address. Returns a promise that resolves to the decrypted message, or rejects if the decryption attempt fails.",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        },
        {
          "$ref": "#/components/tags/Restricted"
        }
      ],
      "params": [
        {
          "type": "string",
          "required": true,
          "description": "The encrypted message to decrypt."
        },
        {
          "required": true,
          "description": "The address of the Ethereum account that can decrypt the message.",
          "$ref": "#/components/schemas/address"
        }
      ],
      "result": {
        "type": "string",
        "description": "The decrypted message."
      }
    },
    {
      "name": "eth_signTypedData_v4",
      "summary": "Presents a structured data message for the user to sign.",
      "description": "Presents a data message for the user to sign in a structured and readable format and returns the signed response. Introduced By [EIP-712](https://eips.ethereum.org/EIPS/eip-712).",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Quantum"
        },
        {
          "$ref": "#/components/tags/Restricted"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "The address of the requested signing account."
        },
        {
          "$ref": "#/components/schemas/TypedData",
          "required": true,
          "description": "TypedData"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/bytes",
        "description": "Signature"
      },
      "examples": [
        {
          "name": "eth_signTypedData_v4 example",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_signTypedData_v4",
            "params": [
              "[[account]]",
              {
                "types": {
                  "EIP712Domain": [
                    {
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "name": "version",
                      "type": "string"
                    },
                    {
                      "name": "chainId",
                      "type": "uint256"
                    },
                    {
                      "name": "verifyingContract",
                      "type": "address"
                    }
                  ],
                  "Person": [
                    {
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "name": "wallet",
                      "type": "address"
                    }
                  ],
                  "Mail": [
                    {
                      "name": "from",
                      "type": "Person"
                    },
                    {
                      "name": "to",
                      "type": "Person"
                    },
                    {
                      "name": "contents",
                      "type": "string"
                    }
                  ]
                },
                "primaryType": "Mail",
                "domain": {
                  "name": "Ether Mail",
                  "version": "1",
                  "chainId": 1,
                  "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"
                },
                "message": {
                  "from": {
                    "name": "Cow",
                    "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"
                  },
                  "to": {
                    "name": "Bob",
                    "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"
                  },
                  "contents": "Hello, Bob!"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "eth_sendTransaction",
      "description": "Creates a new wallet confirmation to make an ethereum transaction from the user's account. This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` or `wallet_requestPermissions` first.",
      "summary": "Initiates a new transaction.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        },
        {
          "$ref": "#/components/tags/Restricted"
        }
      ],
      "params": [
        {
          "type": "object",
          "required": true,
          "description": "The transaction object to sign and send. The parameters to customize a transaction. If a `to` address is not provided. It will be assumed that the transaction is a contract creation transaction, and the `data` field of the transaction will be used as the contract initialization code. `gasPrice` cannot be used together with `maxPriorityFeePerGas` and `maxFeePerGas`.",
          "properties": {
            "to": {
              "$ref": "#/components/schemas/address",
              "description": "to address"
            },
            "from": {
              "$ref": "#/components/schemas/address",
              "required": true,
              "description": "from address"
            },
            "gas": {
              "$ref": "#/components/schemas/uint",
              "description": "gas limit"
            },
            "value": {
              "$ref": "#/components/schemas/uint",
              "description": "value"
            },
            "data": {
              "description": "data",
              "$ref": "#/components/schemas/bytes",
              "required": {
                "if": {
                  "properties": {
                    "to": {
                      "not": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "gasPrice": {
              "$ref": "#/components/schemas/uint",
              "description": "The gas price willing to be paid by the sender in wei. Used in pre-1559 transactions."
            },
            "maxPriorityFeePerGas": {
              "$ref": "#/components/schemas/uint",
              "description": "Maximum fee per gas the sender is willing to pay to miners in wei. Used in 1559 transactions."
            },
            "maxFeePerGas": {
              "$ref": "#/components/schemas/uint",
              "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei. Used in 1559 transactions."
            }
          }
        }
      ],
      "result": {
        "$ref": "#/components/schemas/bytes32",
        "description": "The transaction hash of the sent transaction."
      }
    },
    {
      "name": "eth_getBlockByHash",
      "summary": "Returns information about a block by hash.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/hash32",
          "required": true,
          "description": "Block hash"
        },
        {
          "type": "boolean",
          "required": true,
          "description": "Hydrated transactions"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/Block",
        "description": "Block information"
      },
      "examples": [
        {
          "name": "Get a block by hash on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockByHash",
            "params": ["0xb3b20624f8f0f86eb50dd04688409e5cea4bd02d700bf6e79e9384d47d6a5a35", false]
          }
        },
        {
          "name": "Get a block by hash on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockByHash",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x81e807e7a6031d9f103eeee2a2edc5994c3432ee1e3227c66ff78eef30ea1dec", false]
          }
        }
      ]
    },
    {
      "name": "eth_getBlockByNumber",
      "summary": "Returns information about a block by number.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/BlockNumberOrTag",
          "required": true,
          "description": "Block"
        },
        {
          "type": "boolean",
          "required": true,
          "description": "Hydrated transactions"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/Block",
        "description": "Block information"
      },
      "examples": [
        {
          "name": "Get a block by number on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockByNumber",
            "params": ["0x5BAD55", false]
          }
        },
        {
          "name": "Get the latest block of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockByNumber",
            "options": {
              "chainId": "0x89"
            },
            "params": ["latest", false]
          }
        }
      ]
    },
    {
      "name": "eth_getBlockTransactionCountByHash",
      "summary": "Returns the number of transactions in a block from a block matching the given block hash.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/hash32",
          "description": "Block hash"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Transaction count"
      },
      "examples": [
        {
          "name": "Get a block transactions count by hash on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockTransactionCountByHash",
            "params": ["0xb3b20624f8f0f86eb50dd04688409e5cea4bd02d700bf6e79e9384d47d6a5a35"]
          }
        },
        {
          "name": "Get a block transactions count by hash on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockTransactionCountByHash",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x81e807e7a6031d9f103eeee2a2edc5994c3432ee1e3227c66ff78eef30ea1dec"]
          }
        }
      ]
    },
    {
      "name": "eth_getBlockTransactionCountByNumber",
      "summary": "Returns the number of transactions in a block matching the given block number.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/BlockNumberOrTag"
        }
      ],
      "result": {
        "description": "Transaction count",
        "$ref": "#/components/schemas/uint"
      },
      "examples": [
        {
          "name": "Get a block transactions count by number on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockTransactionCountByNumber",
            "params": ["0x5BAD55"]
          }
        },
        {
          "name": "Get the latest block transactions count of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockTransactionCountByNumber",
            "options": {
              "chainId": "0x89"
            },
            "params": ["latest"]
          }
        }
      ]
    },
    {
      "name": "eth_getUncleCountByBlockHash",
      "summary": "Returns the number of uncles in a block from a block matching the given block hash.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/hash32",
          "description": "Block hash"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Uncle count"
      },
      "examples": [
        {
          "name": "Get a block uncles count by hash on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getUncleCountByBlockHash",
            "params": ["0xb3b20624f8f0f86eb50dd04688409e5cea4bd02d700bf6e79e9384d47d6a5a35"]
          }
        },
        {
          "name": "Get a block uncles count by hash on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getUncleCountByBlockHash",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x81e807e7a6031d9f103eeee2a2edc5994c3432ee1e3227c66ff78eef30ea1dec"]
          }
        }
      ]
    },
    {
      "name": "eth_getUncleCountByBlockNumber",
      "summary": "Returns the number of uncles in a block matching the given block number.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/BlockNumberOrTag"
        }
      ],
      "result": {
        "name": "Uncle count",
        "$ref": "#/components/schemas/uint"
      },
      "examples": [
        {
          "name": "Get a block uncles count by number on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockTransactionCountByNumber",
            "params": ["0x5BAD55"]
          }
        },
        {
          "name": "Get the latest block uncles count of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBlockTransactionCountByNumber",
            "options": {
              "chainId": "0x89"
            },
            "params": ["latest"]
          }
        }
      ]
    },
    {
      "name": "eth_syncing",
      "summary": "Returns an object with data about the sync status or false.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/SyncingStatus",
        "description": "Syncing status"
      },
      "examples": [
        {
          "name": "The syncing status of the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_syncing"
          }
        },
        {
          "name": "The syncing status of the Binance network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "options": {
              "chainId": "0x38"
            },
            "method": "eth_syncing"
          }
        }
      ]
    },
    {
      "name": "eth_coinbase",
      "summary": "Returns the client coinbase address.",
      "tags": [
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/address",
        "description": "Coinbase address"
      },
      "examples": [
        {
          "name": "The wallet selected account coinbase address",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_coinbase"
          }
        }
      ]
    },
    {
      "name": "eth_blockNumber",
      "summary": "Returns the number of most recent block.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Block number"
      },
      "examples": [
        {
          "name": "The latest block number of the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_blockNumber"
          }
        },
        {
          "name": "The latest block number of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "options": {
              "chainId": "0x89"
            },
            "method": "eth_blockNumber"
          }
        }
      ]
    },
    {
      "name": "eth_call",
      "summary": "Executes a new message call immediately without creating a transaction on the block chain.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/GenericTransaction",
          "required": true,
          "description": "Transaction"
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTagOrHash",
          "description": "Block"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/bytes",
        "description": "Return data"
      }
    },
    {
      "name": "eth_estimateGas",
      "summary": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/GenericTransaction",
          "required": true,
          "description": "Transaction"
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTag",
          "description": "Block"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Gas used"
      }
    },
    {
      "name": "eth_gasPrice",
      "summary": "Returns the current price per gas in wei.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Gas price"
      },
      "examples": [
        {
          "name": "The gas price of the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_gasPrice"
          }
        },
        {
          "name": "The gas price of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "options": {
              "chainId": "0x89"
            },
            "method": "eth_gasPrice"
          }
        }
      ]
    },
    {
      "name": "eth_maxPriorityFeePerGas",
      "summary": "Returns the current maxPriorityFeePerGas per gas in wei.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Max priority fee per gas"
      },
      "examples": [
        {
          "name": "The max priority fee per gas of the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_maxPriorityFeePerGas"
          }
        },
        {
          "name": "The max priority fee per gas of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "options": {
              "chainId": "0x89"
            },
            "method": "eth_maxPriorityFeePerGas"
          }
        }
      ]
    },
    {
      "name": "eth_feeHistory",
      "summary": "Transaction fee history",
      "description": "Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/uint",
          "required": true,
          "description": "Requested range of blocks. Clients will return less than the requested range if not all blocks are available."
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTag",
          "required": true,
          "description": "Highest block of the requested range."
        },
        {
          "type": "array",
          "required": true,
          "description": "A monotonically increasing list of percentile values. For each block in the requested range, the transactions will be sorted in ascending order by effective tip per gas and the coresponding effective tip for the percentile will be determined, accounting for gas consumed.",
          "items": {
            "type": "number",
            "description": "Floating point value between 0 and 100."
          }
        }
      ],
      "result": {
        "type": "object",
        "description": "Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.",
        "properties": {
          "oldestBlock": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Lowest number block of returned range."
          },
          "baseFeePerGas": {
            "type": "array",
            "required": true,
            "description": "An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.",
            "items": {
              "$ref": "#/components/schemas/uint"
            }
          },
          "reward": {
            "type": "array",
            "required": true,
            "description": "A two-dimensional array of effective priority fees per gas at the requested block percentiles.",
            "items": {
              "type": "array",
              "description": "An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",
              "items": {
                "$ref": "#/components/schemas/uint",
                "description": "A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty."
              }
            }
          }
        }
      }
    },
    {
      "name": "eth_newFilter",
      "summary": "Creates a filter object, based on filter options, to notify when the state changes (logs).",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/Filter"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Filter Identifier"
      }
    },
    {
      "name": "eth_newBlockFilter",
      "summary": "Creates a filter in the node, to notify when a new block arrives.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Filter Identifier"
      }
    },
    {
      "name": "eth_newPendingTransactionFilter",
      "summary": "Creates a filter in the node, to notify when new pending transactions arrive.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Filter Identifier"
      }
    },
    {
      "name": "eth_uninstallFilter",
      "summary": "Uninstalls a filter with given id.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/uint",
          "description": "Filter Identifier"
        }
      ],
      "result": {
        "type": "boolean",
        "description": "Success"
      }
    },
    {
      "name": "eth_getFilterChanges",
      "summary": "Polling method for a filter, which returns an array of logs which occurred since last poll.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/uint",
          "description": "Filter Identifier"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/FilterResults",
        "description": "Log objects"
      }
    },
    {
      "name": "eth_getFilterLogs",
      "summary": "Returns an array of all logs matching filter with given id.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/uint",
          "description": "Filter Identifier"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/FilterResults",
        "description": "Log objects"
      }
    },
    {
      "name": "eth_getLogs",
      "summary": "Returns an array of all logs matching filter with given id.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/Filter",
          "description": "Filter"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/FilterResults",
        "description": "Log objects"
      }
    },
    {
      "name": "eth_mining",
      "summary": "Returns whether the client is actively mining new blocks.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "type": "boolean",
        "description": "Mining status"
      }
    },
    {
      "name": "eth_hashrate",
      "summary": "Returns the number of hashes per second that the node is mining with.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Mining status"
      }
    },
    {
      "name": "eth_getWork",
      "summary": "Returns the hash of the current block, the seedHash, and the boundary condition to be met (“target”).",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "result": {
        "type": "array",
        "description": "Current work",
        "items": [
          {
            "$ref": "#/components/schemas/bytes32",
            "description": "Proof-of-work hash"
          },
          {
            "$ref": "#/components/schemas/bytes32",
            "description": "seed hash"
          },
          {
            "$ref": "#/components/schemas/bytes32",
            "description": "difficulty"
          }
        ]
      }
    },
    {
      "name": "eth_submitWork",
      "summary": "Used for submitting a proof-of-work solution.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/bytes8",
          "required": true,
          "description": "nonce"
        },
        {
          "$ref": "#/components/schemas/bytes32",
          "required": true,
          "description": "hash"
        },
        {
          "$ref": "#/components/schemas/bytes32",
          "required": true,
          "description": "digest"
        }
      ],
      "result": {
        "type": "boolean",
        "description": "Success"
      }
    },
    {
      "name": "eth_submitHashrate",
      "summary": "Used for submitting mining hashrate.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/bytes32",
          "required": true,
          "description": "Hashrate"
        },
        {
          "$ref": "#/components/schemas/bytes32",
          "required": true,
          "description": "ID"
        }
      ],
      "result": {
        "type": "boolean",
        "description": "Success"
      }
    },
    {
      "name": "eth_getBalance",
      "summary": "Returns the balance of the account of given address.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "Account address"
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Balance"
      },
      "examples": [
        {
          "name": "The latest native account balance of the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getBalance",
            "params": ["[[account]]", "latest"]
          }
        },
        {
          "name": "The latest native account balance of the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "options": {
              "chainId": "0x89"
            },
            "method": "eth_getBalance",
            "params": ["[[account]]", "latest"]
          }
        }
      ]
    },
    {
      "name": "eth_getStorageAt",
      "summary": "Returns the value from a storage position at a given address.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "Address"
        },
        {
          "$ref": "#/components/schemas/uint256",
          "required": true,
          "description": "Storage slot"
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTagOrHash",
          "description": "Block"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/bytes",
        "description": "Value"
      }
    },
    {
      "name": "eth_getTransactionCount",
      "summary": "Returns the number of transactions sent from an address.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "Address"
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTagOrHash",
          "required": false,
          "description": "Block"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/uint",
        "description": "Transaction count"
      },
      "examples": [
        {
          "name": "The number of transactions sent from the account on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionCount",
            "params": ["[[account]]", "latest"]
          }
        },
        {
          "name": "The number of transactions sent from the account on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "options": {
              "chainId": "0x89"
            },
            "method": "eth_getTransactionCount",
            "params": ["[[account]]", "latest"]
          }
        }
      ]
    },
    {
      "name": "eth_getCode",
      "summary": "Returns code at a given address.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "Address"
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTagOrHash",
          "required": false,
          "description": "Block"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/bytes",
        "description": "Bytecode"
      },
      "examples": [
        {
          "name": "Get a contract code on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getCode",
            "params": ["0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", "latest"]
          }
        },
        {
          "name": "Get the USDC code on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getCode",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", "latest"]
          }
        }
      ]
    },
    {
      "name": "eth_getProof",
      "summary": "Returns the merkle proof for a given account and optionally some storage keys.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/address",
          "required": true,
          "description": "Address"
        },
        {
          "type": "array",
          "required": true,
          "description": "Storage keys",
          "items": {
            "$ref": "#/components/schemas/bytesMax32"
          }
        },
        {
          "$ref": "#/components/schemas/BlockNumberOrTagOrHash",
          "required": true,
          "description": "Block"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/AccountProof",
        "description": "Account"
      }
    },
    {
      "name": "eth_sendRawTransaction",
      "summary": "Submits a raw transaction.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/bytes",
          "required": true,
          "description": "Transaction"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/hash32",
        "description": "Transaction hash"
      }
    },
    {
      "name": "eth_getTransactionByHash",
      "summary": "Returns the information about a transaction requested by transaction hash.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/hash32",
          "required": true,
          "description": "Transaction hash"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/TransactionInfo",
        "description": "Transaction information"
      },
      "examples": [
        {
          "name": "Get a transaction by hash on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByHash",
            "params": ["0xac574a02211f1e90f9b79f7985d476073a72658b116905152412e5351ff859be"]
          }
        },
        {
          "name": "Get a transaction by hash on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByHash",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x61beb9d5f992011e5cdab4c1a77787d0ed5044f435561aa4797ac949c00bf3f5"]
          }
        }
      ]
    },
    {
      "name": "eth_getTransactionByBlockHashAndIndex",
      "summary": "Returns information about a transaction by block hash and transaction index position.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/hash32",
          "required": true,
          "description": "Block hash"
        },
        {
          "$ref": "#/components/schemas/uint",
          "required": true,
          "description": "Transaction index"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/TransactionInfo",
        "description": "Transaction information"
      },
      "examples": [
        {
          "name": "Get a transaction by block hash and index on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByBlockHashAndIndex",
            "params": ["0xb3b20624f8f0f86eb50dd04688409e5cea4bd02d700bf6e79e9384d47d6a5a35", "0x0"]
          }
        },
        {
          "name": "Get a transaction by block hash and index on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByBlockHashAndIndex",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x81e807e7a6031d9f103eeee2a2edc5994c3432ee1e3227c66ff78eef30ea1dec", "0x2"]
          }
        }
      ]
    },
    {
      "name": "eth_getTransactionByBlockNumberAndIndex",
      "summary": "Returns information about a transaction by block number and transaction index position.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/BlockNumberOrTag",
          "required": true,
          "description": "Block"
        },
        {
          "$ref": "#/components/schemas/uint",
          "required": true,
          "description": "Transaction index"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/TransactionInfo",
        "description": "Transaction information"
      },
      "examples": [
        {
          "name": "Get a transaction by block number and index on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByBlockNumberAndIndex",
            "params": ["0x5BAD55", "0x0"]
          }
        },
        {
          "name": "Get a transaction from the latest block by index on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByBlockNumberAndIndex",
            "options": {
              "chainId": "0x89"
            },
            "params": ["latest", "0x2"]
          }
        }
      ]
    },
    {
      "name": "eth_getTransactionReceipt",
      "summary": "Returns the receipt of a transaction by transaction hash.",
      "tags": [
        {
          "$ref": "#/components/tags/Multichain"
        },
        {
          "$ref": "#/components/tags/Standard"
        },
        {
          "$ref": "#/components/tags/Ethereum"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/hash32",
          "description": "Transaction hash"
        }
      ],
      "result": {
        "$ref": "#/components/schemas/ReceiptInfo",
        "description": "Receipt Information"
      },
      "examples": [
        {
          "name": "Get a transaction receipt by hash on the connection default network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionReceipt",
            "params": ["0xac574a02211f1e90f9b79f7985d476073a72658b116905152412e5351ff859be"]
          }
        },
        {
          "name": "Get a transaction receipt by hash on the Polygon network",
          "data": {
            "id": "0",
            "jsonrpc": "2.0",
            "method": "eth_getTransactionReceipt",
            "options": {
              "chainId": "0x89"
            },
            "params": ["0x61beb9d5f992011e5cdab4c1a77787d0ed5044f435561aa4797ac949c00bf3f5"]
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "TypedData": {
        "type": "object",
        "properties": {
          "types": {
            "type": "object",
            "required": true,
            "properties": {
              "EIP712Domain": {
                "type": "array",
                "required": true,
                "description": "An array specifying one or more of the following domain separator values: 1) 'name' - The user-readable name of signing domain, i.e., the name of the dapp or the protocol. 2) 'version' - The current major version of the signing domain. 3) 'chainId' - The EIP-155 chain ID. 4) 'verifyingContract' - The address of the contract that will verify the signature. 5) 'salt' - A disambiguating salt for the protocol."
              }
            },
            "additionalProperties": {
              "type": "array",
              "required": ["name", "type"],
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "domain": {
            "type": "object",
            "required": true,
            "description": "Contains the domain separator values specified in the EIP712Domain type."
          },
          "primaryType": {
            "type": "string",
            "required": true
          },
          "message": {
            "type": "object",
            "required": true
          }
        }
      },
      "AddEthereumChainParameter": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "string",
            "required": true,
            "description": "MUST specify the integer ID of the chain as a hexadecimal string, per the eth_chainId Ethereum RPC method. The wallet SHOULD compare the specified chain ID value with the eth_chainId return value from the endpoint. If these values aren't identical, the wallet MUST reject the request."
          },
          "chainName": {
            "type": "string",
            "description": "If provided, MUST specify a human-readable name for the chain."
          },
          "nativeCurrency": {
            "$ref": "#/components/schemas/NativeCurrency"
          },
          "blockExplorerUrls": {
            "type": "array",
            "description": "If provided, MUST specify one or more URLs pointing to block explorer sites for the chain.",
            "items": {
              "format": "uri",
              "type": "string"
            }
          },
          "iconUrls": {
            "type": "array",
            "description": "If provided, MUST specify one or more URLs pointing to reasonably sized images that can be used to visually identify the chain.",
            "items": {
              "format": "uri",
              "type": "string"
            }
          },
          "rpcUrls": {
            "type": "array",
            "items": {
              "format": "uri",
              "type": "string"
            }
          }
        }
      },
      "NativeCurrency": {
        "type": "object",
        "description": "If provided, MUST describe the native currency of the chain using the name, symbol, and decimals fields.",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "format": "SHOULD be human-readable."
          },
          "symbol": {
            "type": "string",
            "required": true,
            "format": "SHOULD be human-readable."
          },
          "decimals": {
            "type": "integer",
            "required": true,
            "min": 0,
            "format": "A non-negative integer."
          }
        }
      },
      "address": {
        "type": "string",
        "format": "hex encoded address",
        "pattern": "^0x[0-9,a-f,A-F]{40}$"
      },
      "addresses": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/address"
        }
      },
      "byte": {
        "type": "string",
        "format": "hex encoded byte",
        "pattern": "^0x([0-9,a-f,A-F]?){1,2}$"
      },
      "bytes": {
        "type": "string",
        "format": "hex encoded bytes",
        "pattern": "^0x[0-9a-f]*$"
      },
      "bytesMax32": {
        "type": "string",
        "format": "32 hex encoded bytes",
        "pattern": "^0x[0-9a-f]{0,64}$"
      },
      "bytes8": {
        "type": "string",
        "format": "8 hex encoded bytes",
        "pattern": "^0x[0-9a-f]{16}$"
      },
      "bytes32": {
        "type": "string",
        "format": "32 hex encoded bytes",
        "pattern": "^0x[0-9a-f]{64}$"
      },
      "bytes256": {
        "type": "string",
        "format": "256 hex encoded bytes",
        "pattern": "^0x[0-9a-f]{512}$"
      },
      "bytes65": {
        "type": "string",
        "format": "65 hex encoded bytes",
        "pattern": "^0x[0-9a-f]{65}$"
      },
      "uint": {
        "type": "string",
        "format": "hex encoded unsigned integer",
        "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$"
      },
      "uint64": {
        "type": "string",
        "format": "hex encoded 64 bit unsigned integer",
        "pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
      },
      "uint256": {
        "type": "string",
        "format": "hex encoded 256 bit unsigned integer",
        "pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
      },
      "hash32": {
        "type": "string",
        "format": "32 byte hex value",
        "pattern": "^0x[0-9a-f]{64}$"
      },
      "Block": {
        "type": "object",
        "description": "Block object",
        "properties": {
          "parentHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Parent block hash"
          },
          "sha3Uncles": {
            "required": true,
            "$ref": "#/components/schemas/hash32",
            "description": "Ommers hash"
          },
          "miner": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "Coinbase"
          },
          "stateRoot": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "State root"
          },
          "transactionsRoot": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Transactions root"
          },
          "receiptsRoot": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Receipts root"
          },
          "logsBloom": {
            "$ref": "#/components/schemas/bytes256",
            "required": true,
            "description": "Bloom filter"
          },
          "difficulty": {
            "$ref": "#/components/schemas/bytes",
            "description": "Difficulty"
          },
          "number": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Number"
          },
          "gasLimit": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Gas limit"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Gas used"
          },
          "timestamp": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Timestamp"
          },
          "extraData": {
            "$ref": "#/components/schemas/bytes",
            "required": true,
            "description": "Extra data"
          },
          "mixHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Mix hash"
          },
          "nonce": {
            "$ref": "#/components/schemas/bytes8",
            "required": true,
            "description": "Nonce"
          },
          "totalDifficulty": {
            "$ref": "#/components/schemas/uint",
            "description": "Total difficulty"
          },
          "baseFeePerGas": {
            "description": "Base fee per gas",
            "$ref": "#/components/schemas/uint"
          },
          "withdrawalsRoot": {
            "$ref": "#/components/schemas/hash32",
            "description": "Withdrawals root"
          },
          "size": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Block size"
          },
          "transactions": {
            "anyOf": [
              {
                "type": "array",
                "required": true,
                "description": "Transaction hashes",
                "items": {
                  "$ref": "#/components/schemas/hash32"
                }
              },
              {
                "type": "array",
                "required": true,
                "description": "Full transactions",
                "items": {
                  "$ref": "#/components/schemas/TransactionSigned"
                }
              }
            ]
          },
          "withdrawals": {
            "type": "array",
            "description": "Withdrawals",
            "items": {
              "$ref": "#/components/schemas/Withdrawal"
            }
          },
          "uncles": {
            "type": "array",
            "required": true,
            "description": "Uncles",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          }
        }
      },
      "BlockTag": {
        "type": "string",
        "enum": ["earliest", "finalized", "safe", "latest", "pending"],
        "description": "`earliest`: The lowest numbered block the client has available; `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination; `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions; `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions; `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. Before the merge transition is finalized, any call querying for `finalized` or `safe` block MUST be responded to with `-39001: Unknown block` error"
      },
      "BlockNumberOrTag": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/uint",
            "description": "Block number"
          },
          {
            "$ref": "#/components/schemas/BlockTag",
            "description": "Block tag"
          }
        ]
      },
      "BlockNumberOrTagOrHash": {
        "description": "Block number, tag, or block hash",
        "anyOf": [
          {
            "description": "Block number",
            "$ref": "#/components/schemas/uint"
          },
          {
            "description": "Block tag",
            "$ref": "#/components/schemas/BlockTag"
          },
          {
            "description": "Block hash",
            "$ref": "#/components/schemas/hash32"
          }
        ]
      },
      "BadBlock": {
        "type": "object",
        "description": "Bad block",
        "properties": {
          "block": {
            "$ref": "#/components/schemas/bytes",
            "required": true,
            "description": "Block"
          },
          "hash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Hash"
          },
          "rlp": {
            "$ref": "#/components/schemas/bytes",
            "required": true,
            "description": "RLP"
          }
        }
      },
      "SyncingStatus": {
        "description": "Syncing status",
        "anyOf": [
          {
            "type": "object",
            "description": "Syncing progress",
            "properties": {
              "startingBlock": {
                "$ref": "#/components/schemas/uint",
                "description": "Starting block"
              },
              "currentBlock": {
                "$ref": "#/components/schemas/uint",
                "description": "Current block"
              },
              "highestBlock": {
                "$ref": "#/components/schemas/uint",
                "description": "Highest block"
              }
            }
          },
          {
            "type": "boolean",
            "description": "Should always return false if not syncing."
          }
        ]
      },
      "FilterResults": {
        "description": "Filter results",
        "anyOf": [
          {
            "type": "array",
            "description": "new block hashes",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          },
          {
            "type": "array",
            "description": "new transaction hashes",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          },
          {
            "type": "array",
            "description": "new logs",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          }
        ]
      },
      "Filter": {
        "type": "object",
        "description": "filter",
        "properties": {
          "fromBlock": {
            "$ref": "#/components/schemas/uint",
            "description": "from block"
          },
          "toBlock": {
            "$ref": "#/components/schemas/uint",
            "description": "to block"
          },
          "address": {
            "description": "Address(es)",
            "anyOf": [
              {
                "$ref": "#/components/schemas/address",
                "description": "Address"
              },
              {
                "$ref": "#/components/schemas/addresses",
                "description": "Addresses"
              }
            ]
          },
          "topics": {
            "$ref": "#/components/schemas/FilterTopics",
            "description": "Topics"
          }
        }
      },
      "FilterTopics": {
        "type": "array",
        "description": "Filter Topics",
        "items": {
          "$ref": "#/components/schemas/FilterTopic"
        }
      },
      "FilterTopic": {
        "description": "Filter Topic List Entry",
        "anyOf": [
          {
            "type": "null",
            "description": "Any Topic Match"
          },
          {
            "$ref": "#/components/schemas/bytes32",
            "description": "Single Topic Match"
          },
          {
            "type": "array",
            "description": "Multiple Topic Match",
            "items": {
              "$ref": "#/components/schemas/bytes32"
            }
          }
        ]
      },
      "Log": {
        "type": "object",
        "description": "log",
        "properties": {
          "removed": {
            "type": "boolean",
            "description": "removed"
          },
          "logIndex": {
            "$ref": "#/components/schemas/uint",
            "description": "log index"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/uint",
            "description": "transaction index"
          },
          "transactionHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "transaction hash"
          },
          "blockHash": {
            "$ref": "#/components/schemas/hash32",
            "description": "block hash"
          },
          "blockNumber": {
            "description": "block number",
            "$ref": "#/components/schemas/uint"
          },
          "address": {
            "$ref": "#/components/schemas/address",
            "description": "address"
          },
          "data": {
            "$ref": "#/components/schemas/bytes",
            "description": "data"
          },
          "topics": {
            "type": "array",
            "description": "topics",
            "items": {
              "$ref": "#/components/schemas/bytes32"
            }
          }
        }
      },
      "ReceiptInfo": {
        "type": "object",
        "description": "Receipt info",
        "properties": {
          "transactionHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "transaction hash"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "transaction index"
          },
          "blockHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "block hash"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "block number"
          },
          "from": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "from"
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "Address of the receiver or null in a contract creation transaction."
          },
          "cumulativeGasUsed": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "The sum of gas used by this transaction and all preceding transactions in the same block."
          },
          "gasUsed": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "The amount of gas used for this specific transaction alone."
          },
          "contractAddress": {
            "description": "The contract address created, if the transaction was a contract creation, otherwise null.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              },
              {
                "type": "null",
                "name": null
              }
            ]
          },
          "logs": {
            "type": "array",
            "required": true,
            "description": "logs",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          },
          "logsBloom": {
            "$ref": "#/components/schemas/bytes256",
            "required": true,
            "description": "logs bloom"
          },
          "root": {
            "$ref": "#/components/schemas/hash32",
            "description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade."
          },
          "status": {
            "$ref": "#/components/schemas/uint",
            "description": "Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade."
          },
          "effectiveGasPrice": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "The actual value per gas deducted from the senders account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas)."
          }
        }
      },
      "AccountProof": {
        "type": "object",
        "description": "Account proof",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "address"
          },
          "accountProof": {
            "type": "array",
            "required": true,
            "description": "accountProof",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          },
          "balance": {
            "$ref": "#/components/schemas/uint256",
            "required": true,
            "description": "balance"
          },
          "codeHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "codeHash"
          },
          "nonce": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "nonce"
          },
          "storageHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "storageHash"
          },
          "storageProof": {
            "type": "array",
            "required": true,
            "description": "Storage proofs",
            "items": {
              "$ref": "#/components/schemas/StorageProof"
            }
          }
        }
      },
      "StorageProof": {
        "type": "object",
        "description": "Storage proof",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/bytesMax32",
            "required": true,
            "description": "key"
          },
          "value": {
            "$ref": "#/components/schemas/uint256",
            "required": true,
            "description": "value"
          },
          "proof": {
            "type": "array",
            "required": true,
            "description": "proof",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          }
        }
      },
      "AccessListEntry": {
        "type": "object",
        "description": "Access list entry",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "storageKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          }
        }
      },
      "AccessList": {
        "type": "array",
        "description": "Access list",
        "items": {
          "$ref": "#/components/schemas/AccessListEntry"
        }
      },
      "Transaction1559Unsigned": {
        "type": "object",
        "description": "EIP-1559 transaction.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/byte",
            "required": true,
            "description": "type"
          },
          "nonce": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "nonce"
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "to address"
          },
          "gas": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "gas limit"
          },
          "value": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "value"
          },
          "input": {
            "$ref": "#/components/schemas/bytes",
            "required": true,
            "description": "input data"
          },
          "maxPriorityFeePerGas": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei"
          },
          "maxFeePerGas": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei"
          },
          "accessList": {
            "$ref": "#/components/schemas/AccessList",
            "required": true,
            "description": "EIP-2930 access list"
          },
          "chainId": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Chain ID that this transaction is valid on."
          }
        }
      },
      "Transaction2930Unsigned": {
        "type": "object",
        "description": "EIP-2930 transaction.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/byte",
            "required": true,
            "description": "type"
          },
          "nonce": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "nonce"
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "to address"
          },
          "gas": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "gas limit"
          },
          "value": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "value"
          },
          "input": {
            "$ref": "#/components/schemas/bytes",
            "required": true,
            "description": "input data"
          },
          "gasPrice": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "The gas price willing to be paid by the sender in wei"
          },
          "accessList": {
            "$ref": "#/components/schemas/AccessList",
            "required": true,
            "description": "EIP-2930 access list"
          },
          "chainId": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "Chain ID that this transaction is valid on."
          }
        }
      },
      "TransactionLegacyUnsigned": {
        "type": "object",
        "description": "Legacy transaction.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/byte",
            "required": true,
            "description": "type"
          },
          "nonce": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "nonce"
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "to address"
          },
          "gas": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "gas limit"
          },
          "value": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "value"
          },
          "input": {
            "$ref": "#/components/schemas/bytes",
            "required": true,
            "description": "input data"
          },
          "gasPrice": {
            "$ref": "#/components/schemas/uint",
            "required": true,
            "description": "The gas price willing to be paid by the sender in wei"
          },
          "chainId": {
            "$ref": "#/components/schemas/uint",
            "description": "Chain ID that this transaction is valid on."
          }
        }
      },
      "TransactionUnsigned": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Transaction1559Unsigned"
          },
          {
            "$ref": "#/components/schemas/Transaction2930Unsigned"
          },
          {
            "$ref": "#/components/schemas/TransactionLegacyUnsigned"
          }
        ]
      },
      "Transaction1559Signed": {
        "type": "object",
        "description": "Signed 1559 Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction1559Unsigned"
          },
          {
            "description": "EIP-1559 transaction signature properties.",
            "properties": {
              "yParity": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature."
              },
              "r": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "r"
              },
              "s": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "s"
              }
            }
          }
        ]
      },
      "Transaction2930Signed": {
        "type": "object",
        "description": "Signed 2930 Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction2930Unsigned"
          },
          {
            "description": "EIP-2930 transaction signature properties.",
            "properties": {
              "yParity": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature."
              },
              "r": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "r"
              },
              "s": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "s"
              }
            }
          }
        ]
      },
      "TransactionLegacySigned": {
        "type": "object",
        "description": "Signed Legacy Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionLegacyUnsigned"
          },
          {
            "description": "Legacy transaction signature properties.",
            "properties": {
              "v": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "v"
              },
              "r": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "r"
              },
              "s": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "s"
              }
            }
          }
        ]
      },
      "TransactionSigned": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Transaction1559Signed"
          },
          {
            "$ref": "#/components/schemas/Transaction2930Signed"
          },
          {
            "$ref": "#/components/schemas/TransactionLegacySigned"
          }
        ]
      },
      "TransactionInfo": {
        "type": "object",
        "description": "Transaction information",
        "allOf": [
          {
            "description": "Contextual information",
            "properties": {
              "blockHash": {
                "$ref": "#/components/schemas/hash32",
                "required": true,
                "description": "block hash"
              },
              "blockNumber": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "block number"
              },
              "from": {
                "$ref": "#/components/schemas/address",
                "required": true,
                "description": "from address"
              },
              "hash": {
                "$ref": "#/components/schemas/hash32",
                "required": true,
                "description": "transaction hash"
              },
              "transactionIndex": {
                "$ref": "#/components/schemas/uint",
                "required": true,
                "description": "transaction index"
              }
            }
          },
          {
            "$ref": "#/components/schemas/TransactionSigned"
          }
        ]
      },
      "GenericTransaction": {
        "type": "object",
        "description": "Transaction object generic to all types",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/byte",
            "description": "type"
          },
          "nonce": {
            "$ref": "#/components/schemas/uint",
            "description": "nonce"
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "to address"
          },
          "from": {
            "$ref": "#/components/schemas/address",
            "description": "from address"
          },
          "gas": {
            "$ref": "#/components/schemas/uint",
            "description": "gas limit"
          },
          "value": {
            "$ref": "#/components/schemas/uint",
            "description": "value"
          },
          "input": {
            "$ref": "#/components/schemas/bytes",
            "description": "input data"
          },
          "gasPrice": {
            "$ref": "#/components/schemas/uint",
            "description": "The gas price willing to be paid by the sender in wei"
          },
          "maxPriorityFeePerGas": {
            "$ref": "#/components/schemas/uint",
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei"
          },
          "maxFeePerGas": {
            "$ref": "#/components/schemas/uint",
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei"
          },
          "accessList": {
            "$ref": "#/components/schemas/AccessList",
            "description": "EIP-2930 access list"
          },
          "chainId": {
            "$ref": "#/components/schemas/uint",
            "description": "Chain ID that this transaction is valid on."
          }
        }
      },
      "Withdrawal": {
        "type": "object",
        "description": "Validator withdrawal",
        "properties": {
          "index": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "index of withdrawal"
          },
          "validatorIndex": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "index of validator that generated withdrawal"
          },
          "address": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "recipient address for withdrawal value"
          },
          "amount": {
            "$ref": "#/components/schemas/uint256",
            "required": true,
            "description": "value contained in withdrawal"
          }
        }
      },
      "ForkchoiceStateV1": {
        "type": "object",
        "description": "Forkchoice state object V1",
        "properties": {
          "headBlockHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Head block hash"
          },
          "safeBlockHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Safe block hash"
          },
          "finalizedBlockHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Finalized block hash"
          }
        }
      },
      "ForkchoiceUpdatedResponseV1": {
        "type": "object",
        "description": "Forkchoice updated response",
        "properties": {
          "payloadStatus": {
            "$ref": "#/components/schemas/RestrictedPayloadStatusV1",
            "required": true,
            "description": "Payload status"
          },
          "payloadId": {
            "$ref": "#/components/schemas/bytes8",
            "description": "Payload id"
          }
        }
      },
      "PayloadAttributesV1": {
        "type": "object",
        "description": "Payload attributes object V1",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Timestamp"
          },
          "prevRandao": {
            "$ref": "#/components/schemas/bytes32",
            "required": true,
            "description": "Previous randao value"
          },
          "suggestedFeeRecipient": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "Suggested fee recipient"
          }
        }
      },
      "PayloadAttributesV2": {
        "type": "object",
        "description": "Payload attributes object V2",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/PayloadAttributesV1/properties/timestamp",
            "required": true
          },
          "prevRandao": {
            "$ref": "#/components/schemas/PayloadAttributesV1/properties/prevRandao",
            "required": true
          },
          "suggestedFeeRecipient": {
            "$ref": "#/components/schemas/PayloadAttributesV1/properties/suggestedFeeRecipient",
            "required": true
          },
          "withdrawals": {
            "type": "array",
            "required": true,
            "description": "Withdrawals",
            "items": {
              "$ref": "#/components/schemas/WithdrawalV1"
            }
          }
        }
      },
      "PayloadStatusV1": {
        "type": "object",
        "description": "Payload status object V1",
        "properties": {
          "status": {
            "type": "string",
            "required": true,
            "description": "Payload validation status",
            "enum": ["VALID", "INVALID", "SYNCING", "ACCEPTED", "INVALID_BLOCK_HASH"]
          },
          "latestValidHash": {
            "$ref": "#/components/schemas/hash32",
            "description": "The hash of the most recent valid block"
          },
          "validationError": {
            "type": "string",
            "description": "Validation error message"
          }
        }
      },
      "RestrictedPayloadStatusV1": {
        "$ref": "#/components/schemas/PayloadStatusV1",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/status",
            "description": "Set of possible values is restricted to VALID, INVALID, SYNCING",
            "enum": ["VALID", "INVALID", "SYNCING"]
          },
          "latestValidHash": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/latestValidHash"
          },
          "validationError": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/validationError"
          }
        }
      },
      "PayloadStatusNoInvalidBlockHash": {
        "$ref": "#/components/schemas/PayloadStatusV1",
        "description": "Payload status object deprecating INVALID_BLOCK_HASH status",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/status",
            "enum": ["VALID", "INVALID", "SYNCING", "ACCEPTED"]
          },
          "latestValidHash": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/latestValidHash"
          },
          "validationError": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/validationError"
          }
        }
      },
      "ExecutionPayloadV1": {
        "type": "object",
        "description": "Execution payload object V1",
        "properties": {
          "parentHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Parent block hash"
          },
          "feeRecipient": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "Recipient of transaction priority fees"
          },
          "stateRoot": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "State root"
          },
          "receiptsRoot": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Receipts root"
          },
          "logsBloom": {
            "$ref": "#/components/schemas/bytes256",
            "required": true,
            "description": "Bloom filter"
          },
          "prevRandao": {
            "$ref": "#/components/schemas/bytes32",
            "required": true,
            "description": "Previous randao value"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Block number"
          },
          "gasLimit": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Gas limit"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Gas used"
          },
          "timestamp": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Timestamp"
          },
          "extraData": {
            "$ref": "#/components/schemas/bytesMax32",
            "required": true,
            "description": "Extra data"
          },
          "baseFeePerGas": {
            "$ref": "#/components/schemas/uint256",
            "required": true,
            "description": "Base fee per gas"
          },
          "blockHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Block hash"
          },
          "transactions": {
            "type": "array",
            "description": "Transactions",
            "required": true,
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          }
        }
      },
      "WithdrawalV1": {
        "description": "Withdrawal object V1",
        "type": "object",
        "properties": {
          "index": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Withdrawal index"
          },
          "validatorIndex": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Validator index"
          },
          "address": {
            "$ref": "#/components/schemas/address",
            "required": true,
            "description": "Withdrawal address"
          },
          "amount": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Withdrawal amount"
          }
        }
      },
      "ExecutionPayloadV2": {
        "description": "Execution payload object V2",
        "type": "object",
        "properties": {
          "parentHash": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/parentHash",
            "required": true
          },
          "feeRecipient": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/feeRecipient",
            "required": true
          },
          "stateRoot": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/stateRoot",
            "required": true
          },
          "receiptsRoot": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/receiptsRoot",
            "required": true
          },
          "logsBloom": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/logsBloom",
            "required": true
          },
          "prevRandao": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/prevRandao",
            "required": true
          },
          "blockNumber": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/blockNumber",
            "required": true
          },
          "gasLimit": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/gasLimit",
            "required": true
          },
          "gasUsed": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/gasUsed",
            "required": true
          },
          "timestamp": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/timestamp",
            "required": true
          },
          "extraData": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/extraData",
            "required": true
          },
          "baseFeePerGas": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/baseFeePerGas",
            "required": true
          },
          "blockHash": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/blockHash",
            "required": true
          },
          "transactions": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/transactions",
            "required": true
          },
          "withdrawals": {
            "type": "array",
            "required": true,
            "description": "Withdrawals",
            "items": {
              "$ref": "#/components/schemas/WithdrawalV1"
            }
          }
        }
      },
      "ExecutionPayloadBodyV1": {
        "type": "object",
        "description": "Execution payload body object V1",
        "properties": {
          "transactions": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/transactions",
            "required": true
          },
          "withdrawals": {
            "type": ["array", "null"],
            "description": "Withdrawals",
            "items": {
              "$ref": "#/components/schemas/WithdrawalV1"
            }
          }
        }
      },
      "TransitionConfigurationV1": {
        "type": "object",
        "description": "Transition configuration object",
        "properties": {
          "terminalTotalDifficulty": {
            "$ref": "#/components/schemas/uint256",
            "required": true,
            "description": "Terminal total difficulty"
          },
          "terminalBlockHash": {
            "$ref": "#/components/schemas/hash32",
            "required": true,
            "description": "Terminal block hash"
          },
          "terminalBlockNumber": {
            "$ref": "#/components/schemas/uint64",
            "required": true,
            "description": "Terminal block number"
          }
        }
      },
      "MethodOptions": {
        "type": "object",
        "description": "Optional RPC options.",
        "properties": {
          "chainId": {
            "description": "Specify the integer ID of the chain as a number or hexadecimal string.",
            "type": {
              "anyOf": ["string", "number"]
            }
          }
        }
      }
    },
    "tags": {
      "Multichain": {
        "name": "Multichain",
        "description": "This method is part of a new, innovative standard that offers Web3 applications an API empowering developers to construct a highly intuitive and user-friendly multi-chain user experience by targeting a specific user network or chain ID.",
        "color": "orange"
      },
      "Standard": {
        "name": "Standard",
        "description": "This method can be found in the majority of existing wallets, serving as a standardized interface that ensures compatibility and ease of integration across various wallet implementations.",
        "color": "green"
      },
      "Ethereum": {
        "name": "Ethereum",
        "description": "Standard ethereum node RPC method.",
        "color": "blue"
      },
      "Quantum": {
        "name": "Quantum",
        "description": "Quantum-specific RPC method.",
        "color": "primary"
      },
      "Restricted": {
        "name": "Restricted",
        "description": "The caller must have the corresponding permission via `wallet_requestPermissions` in order to invoke this method.",
        "color": "red"
      }
    }
  }
}
